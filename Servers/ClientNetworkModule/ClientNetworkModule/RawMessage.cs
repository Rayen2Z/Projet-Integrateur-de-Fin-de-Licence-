// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RawMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from RawMessage.proto</summary>
public static partial class RawMessageReflection {

  #region Descriptor
  /// <summary>File descriptor for RawMessage.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static RawMessageReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChBSYXdNZXNzYWdlLnByb3RvIuQGCgpSYXdNZXNzYWdlEg4KBnVzZXJJRBgB",
          "IAEoDRITCgtyZXF1ZXN0Q29kZRgCIAEoDRIUCgxyZXNwb25zZUNvZGUYAyAB",
          "KA0SJwoIcm9vbUxpc3QYBCADKAsyFS5SYXdNZXNzYWdlLlJvb21CcmllZhIm",
          "Cghyb29tSW5mbxgFIAEoCzIULlJhd01lc3NhZ2UuUm9vbUluZm8SEAoIcGFz",
          "c3dvcmQYBiABKAkSDgoGcHNldWRvGAcgASgJEiIKBmFjdGlvbhgIIAEoCzIS",
          "LlJhd01lc3NhZ2UuQWN0aW9uGqgBCgpQbGF5ZXJJbmZvEhAKCHBsYXllcklE",
          "GAEgASgNEg4KBmlzSG9zdBgCIAEoCBIMCgR0ZWFtGAMgASgNEhAKCGlkZW50",
          "aXR5GAQgASgNEhEKCWlzSGlzVHVybhgFIAEoCBIOCgZwc2V1ZG8YBiABKAkS",
          "DQoFbGFiZWwYByABKA0SEQoJbmJWaWN0b3J5GAggASgNEhMKC25iQmxhY2tD",
          "YXJkGAkgASgNGjgKBENhcmQSDAoEd29yZBgBIAEoCRIQCgh0dXJuZWRVcBgC",
          "IAEoCBIQCghwcm9wZXJ0eRgEIAEoDRrNAQoIUm9vbUluZm8SDgoGcm9vbUlE",
          "GAEgASgNEhIKCnJvb21Ib3N0SUQYAiABKA0SEAoIcm9vbU5hbWUYAyABKAkS",
          "FAoMcm9vbUxhbmd1YWdlGAQgASgNEioKCnBsYXllckxpc3QYBSADKAsyFi5S",
          "YXdNZXNzYWdlLlBsYXllckluZm8SIgoIY2FyZExpc3QYBiADKAsyEC5SYXdN",
          "ZXNzYWdlLkNhcmQSEQoJdGhlbWVMaXN0GAcgAygJEhIKCnRpbWVyVmFsdWUY",
          "CCABKA0afwoJUm9vbUJyaWVmEg4KBnJvb21JRBgBIAEoDRISCgpyb29tSG9z",
          "dElEGAIgASgNEhAKCHJvb21OYW1lGAMgASgJEhQKDHJvb21MYW5ndWFnZRgE",
          "IAEoDRITCgtjb3VudFBsYXllchgFIAEoDRIRCglpc1BsYXlpbmcYBiABKAga",
          "TgoGQWN0aW9uEg4KBnJvb21JRBgBIAEoDRIRCgljYXJkSW5kZXgYAiADKA0S",
          "FAoMY2FyZFF1YW50aXR5GAMgASgNEgsKA21zZxgEIAEoCWIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::RawMessage), global::RawMessage.Parser, new[]{ "UserID", "RequestCode", "ResponseCode", "RoomList", "RoomInfo", "Password", "Pseudo", "Action" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::RawMessage.Types.PlayerInfo), global::RawMessage.Types.PlayerInfo.Parser, new[]{ "PlayerID", "IsHost", "Team", "Identity", "IsHisTurn", "Pseudo", "Label", "NbVictory", "NbBlackCard" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RawMessage.Types.Card), global::RawMessage.Types.Card.Parser, new[]{ "Word", "TurnedUp", "Property" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RawMessage.Types.RoomInfo), global::RawMessage.Types.RoomInfo.Parser, new[]{ "RoomID", "RoomHostID", "RoomName", "RoomLanguage", "PlayerList", "CardList", "ThemeList", "TimerValue" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RawMessage.Types.RoomBrief), global::RawMessage.Types.RoomBrief.Parser, new[]{ "RoomID", "RoomHostID", "RoomName", "RoomLanguage", "CountPlayer", "IsPlaying" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RawMessage.Types.Action), global::RawMessage.Types.Action.Parser, new[]{ "RoomID", "CardIndex", "CardQuantity", "Msg" }, null, null, null)})
        }));
  }
  #endregion

}
#region Messages
public sealed partial class RawMessage : pb::IMessage<RawMessage> {
  private static readonly pb::MessageParser<RawMessage> _parser = new pb::MessageParser<RawMessage>(() => new RawMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RawMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RawMessageReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RawMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RawMessage(RawMessage other) : this() {
    userID_ = other.userID_;
    requestCode_ = other.requestCode_;
    responseCode_ = other.responseCode_;
    roomList_ = other.roomList_.Clone();
    roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
    password_ = other.password_;
    pseudo_ = other.pseudo_;
    action_ = other.action_ != null ? other.action_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RawMessage Clone() {
    return new RawMessage(this);
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private uint userID_;
  /// <summary>
  /// Always required to be filled by client and server
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "requestCode" field.</summary>
  public const int RequestCodeFieldNumber = 2;
  private uint requestCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint RequestCode {
    get { return requestCode_; }
    set {
      requestCode_ = value;
    }
  }

  /// <summary>Field number for the "responseCode" field.</summary>
  public const int ResponseCodeFieldNumber = 3;
  private uint responseCode_;
  /// <summary>
  /// Always required to be filled by server
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ResponseCode {
    get { return responseCode_; }
    set {
      responseCode_ = value;
    }
  }

  /// <summary>Field number for the "roomList" field.</summary>
  public const int RoomListFieldNumber = 4;
  private static readonly pb::FieldCodec<global::RawMessage.Types.RoomBrief> _repeated_roomList_codec
      = pb::FieldCodec.ForMessage(34, global::RawMessage.Types.RoomBrief.Parser);
  private readonly pbc::RepeatedField<global::RawMessage.Types.RoomBrief> roomList_ = new pbc::RepeatedField<global::RawMessage.Types.RoomBrief>();
  /// <summary>
  /// In lobby 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RawMessage.Types.RoomBrief> RoomList {
    get { return roomList_; }
  }

  /// <summary>Field number for the "roomInfo" field.</summary>
  public const int RoomInfoFieldNumber = 5;
  private global::RawMessage.Types.RoomInfo roomInfo_;
  /// <summary>
  /// In room
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RawMessage.Types.RoomInfo RoomInfo {
    get { return roomInfo_; }
    set {
      roomInfo_ = value;
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 6;
  private string password_ = "";
  /// <summary>
  /// For login request only 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "pseudo" field.</summary>
  public const int PseudoFieldNumber = 7;
  private string pseudo_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Pseudo {
    get { return pseudo_; }
    set {
      pseudo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "action" field.</summary>
  public const int ActionFieldNumber = 8;
  private global::RawMessage.Types.Action action_;
  /// <summary>
  /// Play game 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RawMessage.Types.Action Action {
    get { return action_; }
    set {
      action_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RawMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RawMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (RequestCode != other.RequestCode) return false;
    if (ResponseCode != other.ResponseCode) return false;
    if(!roomList_.Equals(other.roomList_)) return false;
    if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
    if (Password != other.Password) return false;
    if (Pseudo != other.Pseudo) return false;
    if (!object.Equals(Action, other.Action)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (RequestCode != 0) hash ^= RequestCode.GetHashCode();
    if (ResponseCode != 0) hash ^= ResponseCode.GetHashCode();
    hash ^= roomList_.GetHashCode();
    if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    if (Pseudo.Length != 0) hash ^= Pseudo.GetHashCode();
    if (action_ != null) hash ^= Action.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(UserID);
    }
    if (RequestCode != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(RequestCode);
    }
    if (ResponseCode != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(ResponseCode);
    }
    roomList_.WriteTo(output, _repeated_roomList_codec);
    if (roomInfo_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(RoomInfo);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Password);
    }
    if (Pseudo.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(Pseudo);
    }
    if (action_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Action);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    if (RequestCode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestCode);
    }
    if (ResponseCode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResponseCode);
    }
    size += roomList_.CalculateSize(_repeated_roomList_codec);
    if (roomInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    if (Pseudo.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Pseudo);
    }
    if (action_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Action);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RawMessage other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.RequestCode != 0) {
      RequestCode = other.RequestCode;
    }
    if (other.ResponseCode != 0) {
      ResponseCode = other.ResponseCode;
    }
    roomList_.Add(other.roomList_);
    if (other.roomInfo_ != null) {
      if (roomInfo_ == null) {
        roomInfo_ = new global::RawMessage.Types.RoomInfo();
      }
      RoomInfo.MergeFrom(other.RoomInfo);
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
    if (other.Pseudo.Length != 0) {
      Pseudo = other.Pseudo;
    }
    if (other.action_ != null) {
      if (action_ == null) {
        action_ = new global::RawMessage.Types.Action();
      }
      Action.MergeFrom(other.Action);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UserID = input.ReadUInt32();
          break;
        }
        case 16: {
          RequestCode = input.ReadUInt32();
          break;
        }
        case 24: {
          ResponseCode = input.ReadUInt32();
          break;
        }
        case 34: {
          roomList_.AddEntriesFrom(input, _repeated_roomList_codec);
          break;
        }
        case 42: {
          if (roomInfo_ == null) {
            roomInfo_ = new global::RawMessage.Types.RoomInfo();
          }
          input.ReadMessage(roomInfo_);
          break;
        }
        case 50: {
          Password = input.ReadString();
          break;
        }
        case 58: {
          Pseudo = input.ReadString();
          break;
        }
        case 66: {
          if (action_ == null) {
            action_ = new global::RawMessage.Types.Action();
          }
          input.ReadMessage(action_);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the RawMessage message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
      private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::RawMessage.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public PlayerInfo() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public PlayerInfo(PlayerInfo other) : this() {
        playerID_ = other.playerID_;
        isHost_ = other.isHost_;
        team_ = other.team_;
        identity_ = other.identity_;
        isHisTurn_ = other.isHisTurn_;
        pseudo_ = other.pseudo_;
        label_ = other.label_;
        nbVictory_ = other.nbVictory_;
        nbBlackCard_ = other.nbBlackCard_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public PlayerInfo Clone() {
        return new PlayerInfo(this);
      }

      /// <summary>Field number for the "playerID" field.</summary>
      public const int PlayerIDFieldNumber = 1;
      private uint playerID_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint PlayerID {
        get { return playerID_; }
        set {
          playerID_ = value;
        }
      }

      /// <summary>Field number for the "isHost" field.</summary>
      public const int IsHostFieldNumber = 2;
      private bool isHost_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool IsHost {
        get { return isHost_; }
        set {
          isHost_ = value;
        }
      }

      /// <summary>Field number for the "team" field.</summary>
      public const int TeamFieldNumber = 3;
      private uint team_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint Team {
        get { return team_; }
        set {
          team_ = value;
        }
      }

      /// <summary>Field number for the "identity" field.</summary>
      public const int IdentityFieldNumber = 4;
      private uint identity_;
      /// <summary>
      ///0 Agent, 1 Detective
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint Identity {
        get { return identity_; }
        set {
          identity_ = value;
        }
      }

      /// <summary>Field number for the "isHisTurn" field.</summary>
      public const int IsHisTurnFieldNumber = 5;
      private bool isHisTurn_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool IsHisTurn {
        get { return isHisTurn_; }
        set {
          isHisTurn_ = value;
        }
      }

      /// <summary>Field number for the "pseudo" field.</summary>
      public const int PseudoFieldNumber = 6;
      private string pseudo_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Pseudo {
        get { return pseudo_; }
        set {
          pseudo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "label" field.</summary>
      public const int LabelFieldNumber = 7;
      private uint label_;
      /// <summary>
      ///INDEX for color
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint Label {
        get { return label_; }
        set {
          label_ = value;
        }
      }

      /// <summary>Field number for the "nbVictory" field.</summary>
      public const int NbVictoryFieldNumber = 8;
      private uint nbVictory_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint NbVictory {
        get { return nbVictory_; }
        set {
          nbVictory_ = value;
        }
      }

      /// <summary>Field number for the "nbBlackCard" field.</summary>
      public const int NbBlackCardFieldNumber = 9;
      private uint nbBlackCard_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint NbBlackCard {
        get { return nbBlackCard_; }
        set {
          nbBlackCard_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as PlayerInfo);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(PlayerInfo other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (PlayerID != other.PlayerID) return false;
        if (IsHost != other.IsHost) return false;
        if (Team != other.Team) return false;
        if (Identity != other.Identity) return false;
        if (IsHisTurn != other.IsHisTurn) return false;
        if (Pseudo != other.Pseudo) return false;
        if (Label != other.Label) return false;
        if (NbVictory != other.NbVictory) return false;
        if (NbBlackCard != other.NbBlackCard) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
        if (IsHost != false) hash ^= IsHost.GetHashCode();
        if (Team != 0) hash ^= Team.GetHashCode();
        if (Identity != 0) hash ^= Identity.GetHashCode();
        if (IsHisTurn != false) hash ^= IsHisTurn.GetHashCode();
        if (Pseudo.Length != 0) hash ^= Pseudo.GetHashCode();
        if (Label != 0) hash ^= Label.GetHashCode();
        if (NbVictory != 0) hash ^= NbVictory.GetHashCode();
        if (NbBlackCard != 0) hash ^= NbBlackCard.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (PlayerID != 0) {
          output.WriteRawTag(8);
          output.WriteUInt32(PlayerID);
        }
        if (IsHost != false) {
          output.WriteRawTag(16);
          output.WriteBool(IsHost);
        }
        if (Team != 0) {
          output.WriteRawTag(24);
          output.WriteUInt32(Team);
        }
        if (Identity != 0) {
          output.WriteRawTag(32);
          output.WriteUInt32(Identity);
        }
        if (IsHisTurn != false) {
          output.WriteRawTag(40);
          output.WriteBool(IsHisTurn);
        }
        if (Pseudo.Length != 0) {
          output.WriteRawTag(50);
          output.WriteString(Pseudo);
        }
        if (Label != 0) {
          output.WriteRawTag(56);
          output.WriteUInt32(Label);
        }
        if (NbVictory != 0) {
          output.WriteRawTag(64);
          output.WriteUInt32(NbVictory);
        }
        if (NbBlackCard != 0) {
          output.WriteRawTag(72);
          output.WriteUInt32(NbBlackCard);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (PlayerID != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerID);
        }
        if (IsHost != false) {
          size += 1 + 1;
        }
        if (Team != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Team);
        }
        if (Identity != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Identity);
        }
        if (IsHisTurn != false) {
          size += 1 + 1;
        }
        if (Pseudo.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Pseudo);
        }
        if (Label != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Label);
        }
        if (NbVictory != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NbVictory);
        }
        if (NbBlackCard != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NbBlackCard);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(PlayerInfo other) {
        if (other == null) {
          return;
        }
        if (other.PlayerID != 0) {
          PlayerID = other.PlayerID;
        }
        if (other.IsHost != false) {
          IsHost = other.IsHost;
        }
        if (other.Team != 0) {
          Team = other.Team;
        }
        if (other.Identity != 0) {
          Identity = other.Identity;
        }
        if (other.IsHisTurn != false) {
          IsHisTurn = other.IsHisTurn;
        }
        if (other.Pseudo.Length != 0) {
          Pseudo = other.Pseudo;
        }
        if (other.Label != 0) {
          Label = other.Label;
        }
        if (other.NbVictory != 0) {
          NbVictory = other.NbVictory;
        }
        if (other.NbBlackCard != 0) {
          NbBlackCard = other.NbBlackCard;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              PlayerID = input.ReadUInt32();
              break;
            }
            case 16: {
              IsHost = input.ReadBool();
              break;
            }
            case 24: {
              Team = input.ReadUInt32();
              break;
            }
            case 32: {
              Identity = input.ReadUInt32();
              break;
            }
            case 40: {
              IsHisTurn = input.ReadBool();
              break;
            }
            case 50: {
              Pseudo = input.ReadString();
              break;
            }
            case 56: {
              Label = input.ReadUInt32();
              break;
            }
            case 64: {
              NbVictory = input.ReadUInt32();
              break;
            }
            case 72: {
              NbBlackCard = input.ReadUInt32();
              break;
            }
          }
        }
      }

    }

    public sealed partial class Card : pb::IMessage<Card> {
      private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Card> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::RawMessage.Descriptor.NestedTypes[1]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Card() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Card(Card other) : this() {
        word_ = other.word_;
        turnedUp_ = other.turnedUp_;
        property_ = other.property_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Card Clone() {
        return new Card(this);
      }

      /// <summary>Field number for the "word" field.</summary>
      public const int WordFieldNumber = 1;
      private string word_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Word {
        get { return word_; }
        set {
          word_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "turnedUp" field.</summary>
      public const int TurnedUpFieldNumber = 2;
      private bool turnedUp_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool TurnedUp {
        get { return turnedUp_; }
        set {
          turnedUp_ = value;
        }
      }

      /// <summary>Field number for the "property" field.</summary>
      public const int PropertyFieldNumber = 4;
      private uint property_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint Property {
        get { return property_; }
        set {
          property_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Card);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Card other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Word != other.Word) return false;
        if (TurnedUp != other.TurnedUp) return false;
        if (Property != other.Property) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Word.Length != 0) hash ^= Word.GetHashCode();
        if (TurnedUp != false) hash ^= TurnedUp.GetHashCode();
        if (Property != 0) hash ^= Property.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Word.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(Word);
        }
        if (TurnedUp != false) {
          output.WriteRawTag(16);
          output.WriteBool(TurnedUp);
        }
        if (Property != 0) {
          output.WriteRawTag(32);
          output.WriteUInt32(Property);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Word.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Word);
        }
        if (TurnedUp != false) {
          size += 1 + 1;
        }
        if (Property != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Property);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Card other) {
        if (other == null) {
          return;
        }
        if (other.Word.Length != 0) {
          Word = other.Word;
        }
        if (other.TurnedUp != false) {
          TurnedUp = other.TurnedUp;
        }
        if (other.Property != 0) {
          Property = other.Property;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              Word = input.ReadString();
              break;
            }
            case 16: {
              TurnedUp = input.ReadBool();
              break;
            }
            case 32: {
              Property = input.ReadUInt32();
              break;
            }
          }
        }
      }

    }

    public sealed partial class RoomInfo : pb::IMessage<RoomInfo> {
      private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => new RoomInfo());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::RawMessage.Descriptor.NestedTypes[2]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public RoomInfo() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public RoomInfo(RoomInfo other) : this() {
        roomID_ = other.roomID_;
        roomHostID_ = other.roomHostID_;
        roomName_ = other.roomName_;
        roomLanguage_ = other.roomLanguage_;
        playerList_ = other.playerList_.Clone();
        cardList_ = other.cardList_.Clone();
        themeList_ = other.themeList_.Clone();
        timerValue_ = other.timerValue_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public RoomInfo Clone() {
        return new RoomInfo(this);
      }

      /// <summary>Field number for the "roomID" field.</summary>
      public const int RoomIDFieldNumber = 1;
      private uint roomID_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint RoomID {
        get { return roomID_; }
        set {
          roomID_ = value;
        }
      }

      /// <summary>Field number for the "roomHostID" field.</summary>
      public const int RoomHostIDFieldNumber = 2;
      private uint roomHostID_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint RoomHostID {
        get { return roomHostID_; }
        set {
          roomHostID_ = value;
        }
      }

      /// <summary>Field number for the "roomName" field.</summary>
      public const int RoomNameFieldNumber = 3;
      private string roomName_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string RoomName {
        get { return roomName_; }
        set {
          roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "roomLanguage" field.</summary>
      public const int RoomLanguageFieldNumber = 4;
      private uint roomLanguage_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint RoomLanguage {
        get { return roomLanguage_; }
        set {
          roomLanguage_ = value;
        }
      }

      /// <summary>Field number for the "playerList" field.</summary>
      public const int PlayerListFieldNumber = 5;
      private static readonly pb::FieldCodec<global::RawMessage.Types.PlayerInfo> _repeated_playerList_codec
          = pb::FieldCodec.ForMessage(42, global::RawMessage.Types.PlayerInfo.Parser);
      private readonly pbc::RepeatedField<global::RawMessage.Types.PlayerInfo> playerList_ = new pbc::RepeatedField<global::RawMessage.Types.PlayerInfo>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::RawMessage.Types.PlayerInfo> PlayerList {
        get { return playerList_; }
      }

      /// <summary>Field number for the "cardList" field.</summary>
      public const int CardListFieldNumber = 6;
      private static readonly pb::FieldCodec<global::RawMessage.Types.Card> _repeated_cardList_codec
          = pb::FieldCodec.ForMessage(50, global::RawMessage.Types.Card.Parser);
      private readonly pbc::RepeatedField<global::RawMessage.Types.Card> cardList_ = new pbc::RepeatedField<global::RawMessage.Types.Card>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::RawMessage.Types.Card> CardList {
        get { return cardList_; }
      }

      /// <summary>Field number for the "themeList" field.</summary>
      public const int ThemeListFieldNumber = 7;
      private static readonly pb::FieldCodec<string> _repeated_themeList_codec
          = pb::FieldCodec.ForString(58);
      private readonly pbc::RepeatedField<string> themeList_ = new pbc::RepeatedField<string>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<string> ThemeList {
        get { return themeList_; }
      }

      /// <summary>Field number for the "timerValue" field.</summary>
      public const int TimerValueFieldNumber = 8;
      private uint timerValue_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint TimerValue {
        get { return timerValue_; }
        set {
          timerValue_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as RoomInfo);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(RoomInfo other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (RoomID != other.RoomID) return false;
        if (RoomHostID != other.RoomHostID) return false;
        if (RoomName != other.RoomName) return false;
        if (RoomLanguage != other.RoomLanguage) return false;
        if(!playerList_.Equals(other.playerList_)) return false;
        if(!cardList_.Equals(other.cardList_)) return false;
        if(!themeList_.Equals(other.themeList_)) return false;
        if (TimerValue != other.TimerValue) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (RoomID != 0) hash ^= RoomID.GetHashCode();
        if (RoomHostID != 0) hash ^= RoomHostID.GetHashCode();
        if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
        if (RoomLanguage != 0) hash ^= RoomLanguage.GetHashCode();
        hash ^= playerList_.GetHashCode();
        hash ^= cardList_.GetHashCode();
        hash ^= themeList_.GetHashCode();
        if (TimerValue != 0) hash ^= TimerValue.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (RoomID != 0) {
          output.WriteRawTag(8);
          output.WriteUInt32(RoomID);
        }
        if (RoomHostID != 0) {
          output.WriteRawTag(16);
          output.WriteUInt32(RoomHostID);
        }
        if (RoomName.Length != 0) {
          output.WriteRawTag(26);
          output.WriteString(RoomName);
        }
        if (RoomLanguage != 0) {
          output.WriteRawTag(32);
          output.WriteUInt32(RoomLanguage);
        }
        playerList_.WriteTo(output, _repeated_playerList_codec);
        cardList_.WriteTo(output, _repeated_cardList_codec);
        themeList_.WriteTo(output, _repeated_themeList_codec);
        if (TimerValue != 0) {
          output.WriteRawTag(64);
          output.WriteUInt32(TimerValue);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (RoomID != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomID);
        }
        if (RoomHostID != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomHostID);
        }
        if (RoomName.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
        }
        if (RoomLanguage != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomLanguage);
        }
        size += playerList_.CalculateSize(_repeated_playerList_codec);
        size += cardList_.CalculateSize(_repeated_cardList_codec);
        size += themeList_.CalculateSize(_repeated_themeList_codec);
        if (TimerValue != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimerValue);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(RoomInfo other) {
        if (other == null) {
          return;
        }
        if (other.RoomID != 0) {
          RoomID = other.RoomID;
        }
        if (other.RoomHostID != 0) {
          RoomHostID = other.RoomHostID;
        }
        if (other.RoomName.Length != 0) {
          RoomName = other.RoomName;
        }
        if (other.RoomLanguage != 0) {
          RoomLanguage = other.RoomLanguage;
        }
        playerList_.Add(other.playerList_);
        cardList_.Add(other.cardList_);
        themeList_.Add(other.themeList_);
        if (other.TimerValue != 0) {
          TimerValue = other.TimerValue;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              RoomID = input.ReadUInt32();
              break;
            }
            case 16: {
              RoomHostID = input.ReadUInt32();
              break;
            }
            case 26: {
              RoomName = input.ReadString();
              break;
            }
            case 32: {
              RoomLanguage = input.ReadUInt32();
              break;
            }
            case 42: {
              playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
              break;
            }
            case 50: {
              cardList_.AddEntriesFrom(input, _repeated_cardList_codec);
              break;
            }
            case 58: {
              themeList_.AddEntriesFrom(input, _repeated_themeList_codec);
              break;
            }
            case 64: {
              TimerValue = input.ReadUInt32();
              break;
            }
          }
        }
      }

    }

    public sealed partial class RoomBrief : pb::IMessage<RoomBrief> {
      private static readonly pb::MessageParser<RoomBrief> _parser = new pb::MessageParser<RoomBrief>(() => new RoomBrief());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<RoomBrief> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::RawMessage.Descriptor.NestedTypes[3]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public RoomBrief() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public RoomBrief(RoomBrief other) : this() {
        roomID_ = other.roomID_;
        roomHostID_ = other.roomHostID_;
        roomName_ = other.roomName_;
        roomLanguage_ = other.roomLanguage_;
        countPlayer_ = other.countPlayer_;
        isPlaying_ = other.isPlaying_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public RoomBrief Clone() {
        return new RoomBrief(this);
      }

      /// <summary>Field number for the "roomID" field.</summary>
      public const int RoomIDFieldNumber = 1;
      private uint roomID_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint RoomID {
        get { return roomID_; }
        set {
          roomID_ = value;
        }
      }

      /// <summary>Field number for the "roomHostID" field.</summary>
      public const int RoomHostIDFieldNumber = 2;
      private uint roomHostID_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint RoomHostID {
        get { return roomHostID_; }
        set {
          roomHostID_ = value;
        }
      }

      /// <summary>Field number for the "roomName" field.</summary>
      public const int RoomNameFieldNumber = 3;
      private string roomName_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string RoomName {
        get { return roomName_; }
        set {
          roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "roomLanguage" field.</summary>
      public const int RoomLanguageFieldNumber = 4;
      private uint roomLanguage_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint RoomLanguage {
        get { return roomLanguage_; }
        set {
          roomLanguage_ = value;
        }
      }

      /// <summary>Field number for the "countPlayer" field.</summary>
      public const int CountPlayerFieldNumber = 5;
      private uint countPlayer_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint CountPlayer {
        get { return countPlayer_; }
        set {
          countPlayer_ = value;
        }
      }

      /// <summary>Field number for the "isPlaying" field.</summary>
      public const int IsPlayingFieldNumber = 6;
      private bool isPlaying_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool IsPlaying {
        get { return isPlaying_; }
        set {
          isPlaying_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as RoomBrief);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(RoomBrief other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (RoomID != other.RoomID) return false;
        if (RoomHostID != other.RoomHostID) return false;
        if (RoomName != other.RoomName) return false;
        if (RoomLanguage != other.RoomLanguage) return false;
        if (CountPlayer != other.CountPlayer) return false;
        if (IsPlaying != other.IsPlaying) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (RoomID != 0) hash ^= RoomID.GetHashCode();
        if (RoomHostID != 0) hash ^= RoomHostID.GetHashCode();
        if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
        if (RoomLanguage != 0) hash ^= RoomLanguage.GetHashCode();
        if (CountPlayer != 0) hash ^= CountPlayer.GetHashCode();
        if (IsPlaying != false) hash ^= IsPlaying.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (RoomID != 0) {
          output.WriteRawTag(8);
          output.WriteUInt32(RoomID);
        }
        if (RoomHostID != 0) {
          output.WriteRawTag(16);
          output.WriteUInt32(RoomHostID);
        }
        if (RoomName.Length != 0) {
          output.WriteRawTag(26);
          output.WriteString(RoomName);
        }
        if (RoomLanguage != 0) {
          output.WriteRawTag(32);
          output.WriteUInt32(RoomLanguage);
        }
        if (CountPlayer != 0) {
          output.WriteRawTag(40);
          output.WriteUInt32(CountPlayer);
        }
        if (IsPlaying != false) {
          output.WriteRawTag(48);
          output.WriteBool(IsPlaying);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (RoomID != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomID);
        }
        if (RoomHostID != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomHostID);
        }
        if (RoomName.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
        }
        if (RoomLanguage != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomLanguage);
        }
        if (CountPlayer != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CountPlayer);
        }
        if (IsPlaying != false) {
          size += 1 + 1;
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(RoomBrief other) {
        if (other == null) {
          return;
        }
        if (other.RoomID != 0) {
          RoomID = other.RoomID;
        }
        if (other.RoomHostID != 0) {
          RoomHostID = other.RoomHostID;
        }
        if (other.RoomName.Length != 0) {
          RoomName = other.RoomName;
        }
        if (other.RoomLanguage != 0) {
          RoomLanguage = other.RoomLanguage;
        }
        if (other.CountPlayer != 0) {
          CountPlayer = other.CountPlayer;
        }
        if (other.IsPlaying != false) {
          IsPlaying = other.IsPlaying;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              RoomID = input.ReadUInt32();
              break;
            }
            case 16: {
              RoomHostID = input.ReadUInt32();
              break;
            }
            case 26: {
              RoomName = input.ReadString();
              break;
            }
            case 32: {
              RoomLanguage = input.ReadUInt32();
              break;
            }
            case 40: {
              CountPlayer = input.ReadUInt32();
              break;
            }
            case 48: {
              IsPlaying = input.ReadBool();
              break;
            }
          }
        }
      }

    }

    public sealed partial class Action : pb::IMessage<Action> {
      private static readonly pb::MessageParser<Action> _parser = new pb::MessageParser<Action>(() => new Action());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Action> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::RawMessage.Descriptor.NestedTypes[4]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Action() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Action(Action other) : this() {
        roomID_ = other.roomID_;
        cardIndex_ = other.cardIndex_.Clone();
        cardQuantity_ = other.cardQuantity_;
        msg_ = other.msg_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Action Clone() {
        return new Action(this);
      }

      /// <summary>Field number for the "roomID" field.</summary>
      public const int RoomIDFieldNumber = 1;
      private uint roomID_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint RoomID {
        get { return roomID_; }
        set {
          roomID_ = value;
        }
      }

      /// <summary>Field number for the "cardIndex" field.</summary>
      public const int CardIndexFieldNumber = 2;
      private static readonly pb::FieldCodec<uint> _repeated_cardIndex_codec
          = pb::FieldCodec.ForUInt32(18);
      private readonly pbc::RepeatedField<uint> cardIndex_ = new pbc::RepeatedField<uint>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<uint> CardIndex {
        get { return cardIndex_; }
      }

      /// <summary>Field number for the "cardQuantity" field.</summary>
      public const int CardQuantityFieldNumber = 3;
      private uint cardQuantity_;
      /// <summary>
      /// toujours 1 
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint CardQuantity {
        get { return cardQuantity_; }
        set {
          cardQuantity_ = value;
        }
      }

      /// <summary>Field number for the "msg" field.</summary>
      public const int MsgFieldNumber = 4;
      private string msg_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Msg {
        get { return msg_; }
        set {
          msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Action);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Action other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (RoomID != other.RoomID) return false;
        if(!cardIndex_.Equals(other.cardIndex_)) return false;
        if (CardQuantity != other.CardQuantity) return false;
        if (Msg != other.Msg) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (RoomID != 0) hash ^= RoomID.GetHashCode();
        hash ^= cardIndex_.GetHashCode();
        if (CardQuantity != 0) hash ^= CardQuantity.GetHashCode();
        if (Msg.Length != 0) hash ^= Msg.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (RoomID != 0) {
          output.WriteRawTag(8);
          output.WriteUInt32(RoomID);
        }
        cardIndex_.WriteTo(output, _repeated_cardIndex_codec);
        if (CardQuantity != 0) {
          output.WriteRawTag(24);
          output.WriteUInt32(CardQuantity);
        }
        if (Msg.Length != 0) {
          output.WriteRawTag(34);
          output.WriteString(Msg);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (RoomID != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomID);
        }
        size += cardIndex_.CalculateSize(_repeated_cardIndex_codec);
        if (CardQuantity != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardQuantity);
        }
        if (Msg.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Action other) {
        if (other == null) {
          return;
        }
        if (other.RoomID != 0) {
          RoomID = other.RoomID;
        }
        cardIndex_.Add(other.cardIndex_);
        if (other.CardQuantity != 0) {
          CardQuantity = other.CardQuantity;
        }
        if (other.Msg.Length != 0) {
          Msg = other.Msg;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              RoomID = input.ReadUInt32();
              break;
            }
            case 18:
            case 16: {
              cardIndex_.AddEntriesFrom(input, _repeated_cardIndex_codec);
              break;
            }
            case 24: {
              CardQuantity = input.ReadUInt32();
              break;
            }
            case 34: {
              Msg = input.ReadString();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
